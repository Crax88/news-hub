version: "3.9"
services:
  db:
    image: postgres:13
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - .:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  api:
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
      target: ${BUILD_TARGET}
    env_file:
      - .env
    restart: unless-stopped
    environment:
      API_PORT: ${API_PORT}
      DB_PORT: ${DB_PORT}
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      NODE_END: ${NODE_ENV}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      ACCESS_TOKEN_EXPIRES: ${ACCESS_TOKEN_EXPIRES}
      SALT: ${SALT}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      DATABASE_URL: ${DATABASE_URL}
      TOKEN_KEY: ${TOKEN_KEY}
      TOKEN_COOKIE_EXPIRES: ${TOKEN_COOKIE_EXPIRES}
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend/src:/home/node/app/src
      - ./backend/prisma:/home/node/app/prisma
      - ./backend/types:/home/node/app/types
      - back-node-modules:/home/node/app/node_modules

  app:
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
      target: ${BUILD_TARGET}
    environment:
      VITE_API_URL: ${VITE_API_URL}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - front-node-modules:/home/node/app/node_modules
      - ./frontend/src:/home/node/app/src

volumes:
  back-node-modules:
  front-node-modules:
